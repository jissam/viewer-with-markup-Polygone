"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextSortState = exports.paginateData = exports.filterData = exports.extractValueFromObject = exports.sortData = void 0;
/**
 * @internal
 *
 * This is the sort function used in the uncontrolled table mode.
 */
function sortData(data, sortedProp, columnValueProcessor) {
    const sortedData = [...data];
    const { prop, order } = sortedProp;
    const sortMultiplier = order === 'asc' ? 1 : -1;
    const sortFnFromObject = typeof columnValueProcessor === 'object'
        ? columnValueProcessor === null || columnValueProcessor === void 0 ? void 0 : columnValueProcessor[prop]
        : undefined;
    const sortFnFromFn = typeof columnValueProcessor === 'function'
        ? (value) => columnValueProcessor(prop, value)
        : undefined;
    sortedData.sort((a, b) => {
        let quantifiedValue1 = extractValueFromObject(prop, a);
        let quantifiedValue2 = extractValueFromObject(prop, b);
        if (sortFnFromObject) {
            quantifiedValue1 = sortFnFromObject(quantifiedValue1);
            quantifiedValue2 = sortFnFromObject(quantifiedValue2);
        }
        else if (sortFnFromFn) {
            quantifiedValue1 = sortFnFromFn(a);
            quantifiedValue2 = sortFnFromFn(b);
        }
        if (quantifiedValue1 < quantifiedValue2) {
            return -1 * sortMultiplier;
        }
        else if (quantifiedValue1 > quantifiedValue2) {
            return 1 * sortMultiplier;
        }
        return 0;
    });
    return sortedData;
}
exports.sortData = sortData;
function extractValueFromObject(prop, rowData) {
    return prop.split('.').reduce((a, b) => {
        if (a) {
            return a[b];
        }
        return undefined;
    }, rowData);
}
exports.extractValueFromObject = extractValueFromObject;
/**
 * @internal
 *
 * This is the filter function used in the uncontrolled table mode.
 */
function filterData(data, headers, filterText) {
    if (filterText === '') {
        return data;
    }
    const lowercased = filterText.toLowerCase();
    return data.filter((element) => {
        let isElementIncluded = false;
        for (const key in headers) {
            const header = headers[key];
            if (header.isFilterable) {
                let columnValue = extractValueFromObject(header.prop, element);
                // Only process non-null values.
                if (columnValue !== null && columnValue !== undefined) {
                    if (typeof columnValue !== 'string') {
                        // Convert to string if it is not a string.
                        columnValue = columnValue.toString();
                    }
                    columnValue = columnValue.toLowerCase();
                    isElementIncluded = columnValue.includes(lowercased);
                    if (isElementIncluded) {
                        break;
                    }
                }
            }
        }
        return isElementIncluded;
    });
}
exports.filterData = filterData;
/**
 * @internal
 *
 * This is the paginate function used in the uncontrolled table mode.
 */
function paginateData(data, currentPage, rowsPerPage) {
    let paginatedData = [...data];
    if (rowsPerPage !== undefined) {
        const startRow = (currentPage - 1) * rowsPerPage;
        const endRow = currentPage * rowsPerPage;
        paginatedData = data.slice(startRow, endRow);
    }
    return paginatedData;
}
exports.paginateData = paginateData;
/**
 * @internal
 *
 * This is a helper function to get the next sort state.
 */
function getNextSortState(oldSort, sortedProp) {
    const nextSort = { order: 'asc', prop: sortedProp };
    if (sortedProp === oldSort.prop) {
        nextSort.order = oldSort.order === 'asc' ? 'desc' : 'asc';
    }
    return nextSort;
}
exports.getNextSortState = getNextSortState;
